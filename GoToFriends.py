import telebot
import emoji
from telebot import types
import time
import json
import requests
import random

token = "üî¶"
telebot.apihelper.proxy = {'https': 'socks5://tvorogme:TyhoRuiGhj1874@tvorog.me:6666'}
bot = telebot.TeleBot(token=token)

news_shapito = 'shapito'
url = 'https://meduza.io/api/v3/search?chrono={}&locale=ru&page=0&per_page=24'.format(news_shapito)
response = requests.get(url)
answer = json.loads(response.text)

urr = []
documents_answer = answer.get('collection')
for i in range(len(documents_answer)):
    link = documents_answer[i]
    url = 'https://meduza.io/{}'.format(link)
    urr.append(url)
    if i == 20:
        break

queue = []
interests = {}
current_conversations = {}
nicknames={}
def interest(message):
    global queue
    user = message.chat.id
    global interests
    try:
        interests[user]=message.text
    except:
        bot.send_message(user, 'Something goes wrong...')
    bot.send_message(user, "üë• –ü–æ–º–µ—â–∞—é —Ç–µ–±—è –≤ –æ—á–µ—Ä–µ–¥—å. –ù–∞–¥–æ —á—É—Ç—å –ø–æ–¥–æ–∂–¥–∞—Ç—å")
    if len(queue) == 0:
        queue.append(user)
        bot.send_message(queue[0], 'üê≥ –ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç. –ù–æ –≤—ã –≤ –æ—á–µ—Ä–µ–¥–∏.. –ö–∏–ø –≥–æ–∏–Ω!')
        return
    if user in queue:
        bot.send_message(user, 'ü¶ë –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏')
        return
    else:
        ran = random.randint(1, 20)
        queue.append(user)
        current_conversations[queue[0]] = queue[1]
        current_conversations[queue[1]] = queue[0]
        nicknames[user] = message.from_user.username
        bot.send_message(current_conversations[queue[0]], "üëã –Ø –Ω–∞—à–µ–ª —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
        time.sleep(2)
        bot.send_message(current_conversations[queue[0]], "–í–æ—Ç, —á—Ç–æ –æ–Ω –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–æ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: " + str(interests[queue[0]]))
        time.sleep(1)
        bot.send_message(current_conversations[queue[0]], "–ê –æ–±—Å—É–¥–∏—Ç—å –º–æ–∂–µ—Ç–µ –≤–æ—Ç —á—Ç–æ: " + str(urr[ran]))

        bot.send_message(current_conversations[queue[1]], "üëã –Ø –Ω–∞—à–µ–ª —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
        time.sleep(2)
        bot.send_message(current_conversations[queue[1]], "–í–æ—Ç, —á—Ç–æ –æ–Ω –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–æ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: " + str(interests[queue[1]]))
        time.sleep(1)
        bot.send_message(current_conversations[queue[1]], "–ê –æ–±—Å—É–¥–∏—Ç—å –º–æ–∂–µ—Ç–µ –≤–æ—Ç —á—Ç–æ: " + str(urr[ran]))
        queue = []



@bot.message_handler(commands=['start'])
def start(message):

    global interests
    global queue
    user = message.chat.id

    if user in queue:
        bot.send_message(user, 'ü¶ë –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏')
        return

    bot.send_message(user, "‚úãÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π.")

    time.sleep(1)
    bot.send_message(user, "ü§ñ  –Ø —Å–æ–µ–¥–∏–Ω—è—é —Ç–µ–±—è —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∞ –ø–æ–∑–∂–µ (–µ—Å–ª–∏ –≤—ã –ø–æ–¥—Ä—É–∂–∏—Ç–µ—Å—å)"
                           " —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –∫–∞–∫ –µ–≥–æ –∑–æ–≤—É—Ç –∏ –ø–æ–¥—Ä—É–∂–∏—Ç—å—Å—è –≤ —Ä–µ–∞–ª–µ!")
    bot.send_message(user, "üôå –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–ø–∏—à–∏ /deanon, –µ—Å–ª–∏ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç —Å–æ–≥–ª–∞—Å–∏–µ–º, —Ç—ã —É–∑–Ω–∞–µ—à—å –∫—Ç–æ –æ–Ω.")
    time.sleep(2)
    m = bot.send_message(user, "üì∑ üéÜ üéÆ –í–≤–µ–¥–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
    bot.register_next_step_handler(m, interest)
@bot.message_handler(commands=['stop'])
def stop(message):
    return

@bot.message_handler(content_types=['text'])
def talking(message):
    global nicknames
    uid=message.chat.id
    text=message.text
    print(text,message.chat.id,message.from_user.username)
    try:
        nicknames[message.chat.id] = message.from_user.username
    except:
        nicknames[message.chat.id] = 'no nickname'
    try:
        bot.send_message(current_conversations[uid],text)
    except:
        bot.send_message(uid, "Something goes wrong")
    if text == '/deanon':
        keyboard = types.InlineKeyboardMarkup()
        user = message.chat.id
        bot.send_message(user, "–ñ–¥—É —Å–æ–≥–ª–∞—Å–∏—è —Ç–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üïê")
        button1 = types.InlineKeyboardButton(text='‚úãÔ∏è –ö–æ–Ω–µ—á–Ω–æ', callback_data="button1")
        button2 = types.InlineKeyboardButton(text='üó£ –ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç.', callback_data="button2")
        keyboard.add(button1)
        keyboard.add(button2)
        bot.send_message(current_conversations[user], '–¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å –∫—Ç–æ —Ç—ã. –°–æ–≥–ª–∞—Å–µ–Ω?', reply_markup=keyboard)



    @bot.callback_query_handler(func=lambda call: True)
    def photoo(call):
        global nicknames
        user=call.message.chat.id
        if call.data == 'button1':
            bot.send_message(current_conversations[user], 'üì¢ –ò.. –≤–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:')
            try:
                bot.send_message(current_conversations[user], "@"+str(nicknames[user]))
            except:
                bot.send_message(current_conversations[user],'Something goes wrong...')
            bot.send_message(user, '–¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ç–µ–ø–µ—Ä—å –∑–Ω–∞–µ—Ç —Ç–≤–æ–π –Ω–∏–∫. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ª—Å –∏ –æ–±—â–∞–π—Ç–µ—Å—å, –∞ –ª—É—á—à–µ –≤—Å—Ç—Ä–µ—Ç—å—Ç–µ—Å—å –≥–¥–µ-–Ω–∏–±—É–¥—å.')
            bot.send_message(user, '–£–¥–∞—á–∏, —Ä–µ–±—è—Ç. –í—ã –∫—Ä—É—Ç—ã–µ üòè')
            nicknames={}
            return
        if call.data == 'button2':
            bot.send_message(current_conversations[user], '–ñ–∞–ª—å.. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è!')
            bot.send_message(message.chat.id, '–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω. –ñ–∞–ª—å.')


bot.polling(none_stop=True)